import { Repository } from 'typeorm';
import { JwtUser } from '../auth/jwt-user.interface';
import { PaginationResponseDto } from '../dtos/pagination-response.dto';
import { CreatePostDto, PostQueryDto, UpdatePostDto } from '../dtos/post.dto';
import { HotPost } from '../entities/hot-post.entity';
import { Post } from '../entities/post.entity';
import { SportCategory } from '../entities/sport-category.entity';
import { User } from '../entities/user.entity';
import { PostHateService } from './post-hate.service';
import { PostLikeService } from './post-like.service';
import { TempImageService } from './temp-image.service';
export declare class PostService {
    private readonly postRepository;
    private readonly sportCategoryRepository;
    private readonly userRepository;
    private readonly hotPostRepository;
    private readonly postLikeService;
    private readonly postHateService;
    private readonly tempImageService;
    private viewedPosts;
    constructor(postRepository: Repository<Post>, sportCategoryRepository: Repository<SportCategory>, userRepository: Repository<User>, hotPostRepository: Repository<HotPost>, postLikeService: PostLikeService, postHateService: PostHateService, tempImageService: TempImageService);
    findAll(query?: PostQueryDto): Promise<PaginationResponseDto<Post>>;
    findOne(id: number): Promise<Post | null>;
    findOneWithDetails(id: number): Promise<Post | null>;
    findByUserId(userId: number): Promise<Post[]>;
    create(createPostDto: CreatePostDto, user: JwtUser): Promise<Post>;
    update(id: number, updatePostDto: UpdatePostDto): Promise<Post | null>;
    remove(id: number): Promise<import("typeorm").DeleteResult>;
    incrementViewCount(id: number): Promise<void>;
    incrementViewCountIfNotViewed(id: number, ip: string): Promise<boolean>;
    private cleanupOldRecords;
    checkUserLikeStatus(postId: number, userId?: number): Promise<boolean>;
    checkUserHateStatus(postId: number, userId?: number): Promise<boolean>;
    getPostLikeCount(postId: number): Promise<number>;
    getPostHateCount(postId: number): Promise<number>;
    getHotPosts(): Promise<any[]>;
    getRealTimeHotPosts(): Promise<any[]>;
    getStoredHotPosts(date?: Date): Promise<any[]>;
    private extractImageUrlsFromContent;
}

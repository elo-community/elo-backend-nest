name: Deploy ELO Community Monorepo

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install root dependencies
        run: npm ci

      - name: Install package dependencies
        run: |
          echo "Installing contracts dependencies..."
          npm install --workspace=contracts
          echo "Installing backend dependencies..."
          npm install --workspace=backend

      - name: Create .env file
        run: |
          echo "Creating .env file from GitHub Secrets..."
          echo "${{ secrets.ENV }}" | base64 -d > .env
          echo "=== .env file created ==="
          ls -la .env

      - name: Build contracts
        run: |
          echo "Building smart contracts..."
          npm run build:contracts

      - name: Build backend
        run: |
          echo "Building NestJS backend..."
          npm run build:backend

      - name: Verify build outputs
        run: |
          echo "Checking contracts build output..."
          ls -la packages/contracts/artifacts/
          ls -la packages/contracts/typechain-types/
          
          echo "Checking backend build output..."
          ls -la packages/backend/dist/
          if [ ! -f "packages/backend/dist/main.js" ]; then
            echo "❌ Error: packages/backend/dist/main.js not found!"
            exit 1
          fi
          echo "✅ All build verifications passed"

      - name: Log in to Docker Hub (CI)
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          build-args: |
            NODE_ENV=deploy
            ACTIVE_NETWORK=amoy
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/elo-community:latest
            ${{ secrets.DOCKER_USERNAME }}/elo-community:${{ github.sha }}

      - name: Test Docker Image (local)
        run: |
          echo "Testing Docker image locally..."
          docker run --rm ${{ secrets.DOCKER_USERNAME }}/elo-community:latest node -e "
            console.log('NODE_ENV:', process.env.NODE_ENV);
            console.log('ACTIVE_NETWORK:', process.env.ACTIVE_NETWORK);
            if (process.env.NODE_ENV && process.env.ACTIVE_NETWORK) {
              console.log('✅ Environment variables loaded successfully');
            } else {
              console.log('❌ Environment variables not loaded');
            }
          "
          echo "✅ Docker image test passed"

      # (2) envsubst 설치 + docker-compose 렌더링(SHA 태그 주입)
      - name: Install envsubst
        run: sudo apt-get update && sudo apt-get install -y gettext-base

      - name: Render docker-compose with immutable tag (SHA)
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          envsubst < infra/docker-compose.yml > infra/docker-compose.rendered.yml
          echo "=== Rendered docker-compose ==="
          head -n 80 infra/docker-compose.rendered.yml || true

      # EC2 SSH 키 설정
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_PRIVATE_KEY }}

      # .env 파일 생성
      - name: Create .env file on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << EOF
            mkdir -p /home/${{ secrets.EC2_USERNAME }}/elo-backend-nest
            echo "${{ secrets.ENV }}" | base64 -d > /home/${{ secrets.EC2_USERNAME }}/elo-backend-nest/.env
          EOF

      # (2) 렌더링된 compose & nginx 설정을 EC2에 업로드
      - name: Upload docker-compose and nginx config to EC2
        run: |
          scp -o StrictHostKeyChecking=no -r ./infra/docker-compose.rendered.yml ./nginx \
            ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USERNAME }}/elo-backend-nest/

      - name: SSH into EC2 and deploy
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            cd /home/${{ secrets.EC2_USERNAME }}/elo-backend-nest

            # 1) Docker login (조용히)
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin >/dev/null 2>&1 || true

            # 2) 렌더링본 적용
            mv -f docker-compose.rendered.yml docker-compose.yml

            # 3) 이름 충돌 제거(조용히 무시)
            sudo docker rm -f backend nginx-proxy certbot elo-backend-1 >/dev/null 2>&1 || true

            # 4) 동일 프로젝트명으로 배포
            PROJECT=elo
            sudo docker compose -p "$PROJECT" pull >/dev/null
            sudo docker compose -p "$PROJECT" up -d --pull always --no-deps --force-recreate --remove-orphans backend nginx >/dev/null

            # 5) 백엔드 healthy 대기
            get_backend_cid() {
              sudo docker ps -q \
                -f "label=com.docker.compose.project=$PROJECT" \
                -f "label=com.docker.compose.service=backend"
            }
            CID=""
            for i in $(seq 1 30); do
              CID="$(get_backend_cid)"
              [ -n "$CID" ] && break
              sleep 2
            done
            [ -n "$CID" ] || { echo "Backend container not found."; exit 1; }

            get_health() {
              sudo docker inspect "$CID" --format '{{if .State.Health}}{{.State.Health.Status}}{{else}}none{{end}}' 2>/dev/null || echo "unknown"
            }
            H="$(get_health)"
            if [ "$H" != "none" ] && [ "$H" != "unknown" ]; then
              for i in $(seq 1 60); do
                H="$(get_health)"
                [ "$H" = "healthy" ] && break
                [ "$H" = "unhealthy" ] && { echo "Backend unhealthy."; exit 1; }
                sleep 2
              done
              [ "$H" = "healthy" ] || { echo "Backend not healthy in time."; exit 1; }
            fi

            # 6) nginx 컨테이너 존재 확인
            NGINX_CID="$(sudo docker ps -q -f "label=com.docker.compose.project=$PROJECT" -f "label=com.docker.compose.service=nginx")"
            [ -n "$NGINX_CID" ] || { echo "nginx container not found."; exit 1; }

            # 7) Nginx HTTP 체크 (Host 헤더 포함 + 리다이렉트 허용, 조용히 대기 루프)
            HOST=api.trivus.net
            ok=false
            for i in $(seq 1 60); do
              STATUS="$(curl -s -o /dev/null -w '%{http_code}' --max-time 5 -H "Host: $HOST" http://127.0.0.1/ || true)"
              case "$STATUS" in
                200|301|302|308) ok=true; break ;;
              esac
              sleep 2
            done
            $ok || { echo "Nginx not ready (bad status)."; exit 1; }

            echo "Deploy OK."
            exit 0
          EOF

name: Deploy to Production

on:
  push:
    branches: [ main, deploy ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: docker/setup-buildx-action@v3

    # 1) 일관된 태그(날짜+짧은 SHA)
    - name: Set IMAGE_TAG
      run: |
        TZ=Asia/Seoul
        echo "IMAGE_TAG=$(date +%Y%m%d-%H%M)-${GITHUB_SHA::7}" >> $GITHUB_ENV
        echo "CHANNEL_TAG=${GITHUB_REF_NAME}-latest" >> $GITHUB_ENV

    # ✅ 2) Docker Hub 로그인 (쓰기 권한 토큰 사용!)
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}  # 'Access Token(Write)' 권장. 2FA 켠 계정은 반드시 토큰 사용

    # 3) 이미지 빌드 & 푸시 — 위에서 만든 태그로 통일
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/elo-community:${{ env.IMAGE_TAG }}
          ${{ secrets.DOCKER_USERNAME }}/elo-community:${{ env.CHANNEL_TAG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Copy code to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        source: "."
        target: "${{ secrets.PROJECT_PATH }}"
        strip_components: 0
        overwrite: true

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          set -e
          PROJECT_DIR="${{ secrets.PROJECT_PATH }}"
          cd "$PROJECT_DIR"

          # 루트 .env 복원
          echo '${{ secrets.ENV }}' | base64 -d > .env || true
          chmod 600 .env

          # DOCKER_USERNAME / IMAGE_TAG 주입(없으면 추가, 있으면 교체)
          grep -q '^DOCKER_USERNAME=' .env && \
            sed -i 's/^DOCKER_USERNAME=.*/DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}/' .env || \
            echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env

          grep -q '^IMAGE_TAG=' .env && \
            sed -i 's/^IMAGE_TAG=.*/IMAGE_TAG=${{ env.IMAGE_TAG }}/' .env || \
            echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" >> .env

          # 프리뷰
          sudo docker compose --env-file ./.env -f docker-compose.yml config | grep -E 'image:|DOCKER_USERNAME|IMAGE_TAG' || true

          # 컨테이너 업데이트
          sudo docker compose --env-file ./.env -f docker-compose.yml pull
          sudo docker compose --env-file ./.env -f docker-compose.yml up -d

          # 헬스체크
          sleep 10
          curl -fsS http://localhost:3000/api/v1/health || (sudo docker compose logs --no-color --tail=200 && exit 1)

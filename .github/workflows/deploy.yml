name: Deploy to Production # Test deployment

on:
  push:
    branches: [ main, deploy ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

     - name: Set IMAGE_TAG
      run: |
        TZ=Asia/Seoul
        echo "IMAGE_TAG=$(date +%Y%m%d-%H%M)-${GITHUB_SHA::7}" >> $GITHUB_ENV
        echo "CHANNEL_TAG=${GITHUB_REF_NAME}-latest" >> $GITHUB_ENV

      
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/elo-community:${{ env.IMAGE_TAG }}
          ${{ secrets.DOCKER_USERNAME }}/elo-community:${{ env.CHANNEL_TAG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Copy code to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        source: "."
        target: "${{ secrets.PROJECT_PATH }}"
        strip_components: 0
        overwrite: true
        
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          set -e
          PROJECT_DIR="${{ secrets.PROJECT_PATH }}"
          echo "📁 PROJECT_DIR=$PROJECT_DIR"
          mkdir -p "$PROJECT_DIR"
          cd "$PROJECT_DIR"

          echo "🔐 restore .env (base64 from secrets.ENV)"
          echo '${{ secrets.ENV }}' | base64 -d > .env || true
          chmod 600 .env

          echo "📝 ensure DOCKER_USERNAME / IMAGE_TAG in root .env"
          if grep -q '^DOCKER_USERNAME=' .env; then
            sed -i 's/^DOCKER_USERNAME=.*/DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}/' .env
          else
            echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
          fi
          if grep -q '^IMAGE_TAG=' .env; then
            sed -i 's/^IMAGE_TAG=.*/IMAGE_TAG=${{ env.IMAGE_TAG }}/' .env
          else
            echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" >> .env
          fi

          # (비공개 레지스트리면 로그인 필요)
          # echo '${{ secrets.DOCKER_PASSWORD }}' | sudo docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin

          echo "🧪 compose config preview"
          sudo docker compose --env-file ./.env -f docker-compose.yml config | grep -E 'image:|DOCKER_USERNAME|IMAGE_TAG' || true

          echo "🐳 docker compose up"
          sudo docker compose --env-file ./.env -f docker-compose.yml pull
          sudo docker compose --env-file ./.env -f docker-compose.yml up -d

          echo "🩺 health check"
          sleep 10
          curl -fsS http://localhost:3000/api/v1/health || (sudo docker compose logs --no-color --tail=200 && exit 1)
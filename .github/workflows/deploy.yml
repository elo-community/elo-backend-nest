name: Deploy ELO Community Monorepo

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install root dependencies
        run: npm ci

      - name: Install package dependencies
        run: |
          echo "Installing contracts dependencies..."
          npm install --workspace=contracts
          echo "Installing backend dependencies..."
          npm install --workspace=backend

      - name: Create .env file
        run: |
          echo "${{ secrets.ENV }}" | base64 -d > .env
          echo "=== .env file created ==="
          ls -la .env
          echo "=== .env file content (first few lines) ==="
          head -5 .env

      - name: Build contracts
        run: |
          echo "Building smart contracts..."
          npm run build:contracts

      - name: Build backend
        run: |
          echo "Building NestJS backend..."
          npm run build:backend

      - name: Verify build outputs
        run: |
          echo "Checking contracts build output..."
          ls -la packages/contracts/artifacts/
          ls -la packages/contracts/typechain-types/
          
          echo "Checking backend build output..."
          ls -la packages/backend/dist/
          if [ ! -f "packages/backend/dist/main.js" ]; then
            echo "❌ Error: packages/backend/dist/main.js not found!"
            exit 1
          fi
          echo "✅ All build verifications passed"

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          build-args: |
            ENV_CONTENT=${{ secrets.ENV }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/elo-community:latest
            ${{ secrets.DOCKER_USERNAME }}/elo-community:${{ github.sha }}

      - name: Test Docker Image
        run: |
          echo "Testing Docker image locally..."
          # 환경변수가 제대로 설정되었는지 확인
          docker run --rm ${{ secrets.DOCKER_USERNAME }}/elo-community:latest node -e "
            console.log('ENV_CONTENT:', process.env.ENV_CONTENT ? 'SET' : 'NOT SET');
            if (process.env.ENV_CONTENT) {
              console.log('✅ Environment variables loaded successfully');
            } else {
              console.log('❌ Environment variables not loaded');
            }
          "
          echo "✅ Docker image test passed"

      # EC2 SSH 키 설정
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_PRIVATE_KEY }}

      # .env 파일 생성
      - name: Create .env file on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << EOF
            echo "${{ secrets.ENV }}" | base64 -d > /home/${{ secrets.EC2_USERNAME }}/elo-backend-nest/.env
          EOF

      # EC2로 파일 복사
      - name: Upload docker-compose and nginx config to EC2
        run: |
          scp -o StrictHostKeyChecking=no -r ./docker-compose.yml ./nginx \
            ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USERNAME }}/elo-backend-nest/

      # EC2에서 Docker Compose 실행
      - name: SSH into EC2 and deploy
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/${{ secrets.EC2_USERNAME }}/elo-backend-nest
            sudo docker compose pull
            sudo docker compose up -d
          EOF

      # 배포 후 검증
      - name: Verify deployment
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 30
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/${{ secrets.EC2_USERNAME }}/elo-backend-nest
            sudo docker compose ps
            sudo docker compose logs --tail=20
          EOF
